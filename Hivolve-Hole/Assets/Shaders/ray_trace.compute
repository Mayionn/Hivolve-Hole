// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> skybox;
SamplerState sampler_skybox;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 light; //xyz - dir; w - intensidade da luz

static const float PI = 3.1415f;

struct sphere
{
	float radius;
	float3 center;
	float3 color;
};
StructuredBuffer<sphere> spheres;

//ray stuff

struct ray
{
	float3 dir;
	float3 origin;
	float3 energy;
};

struct rayHit
{
	float3 pos;
	float distance;
	float3 normal;
	float3 color;
};

ray createRay(float3 ori, float3 dir)
{
	ray r;
	r.origin = ori;
	r.dir = dir;
	r.energy = float3(1,1,1);
	return r;
}

rayHit createRayHit()
{
	rayHit r;
	r.pos = float3(0,0,0);
	r.distance = 100000000;
	r.normal = float3(0,0,0);
	r.color = float3(0,0,0);
	return r;
}

ray createCameraRay(float2 uv)
{
	//origin - camera position
	float3 cameraPos = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
	//direction - use projection matrix
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
	direction = normalize(mul(_CameraToWorld, float4(direction, 0.0)).xyz);

	return createRay(cameraPos, direction);
}

//intersection stuff

void intersectSphere(ray r, int sphereIndex, inout rayHit rh)
{
	sphere s = spheres[sphereIndex];
	float3 d = r.origin - s.center;
	float p1 = -dot(r.dir, d);
	float p2sqr = p1 * p1 - dot(d,d) + s.radius*s.radius;
	if(p2sqr < 0) return;
	float p2 = sqrt(p2sqr);
	float t;
	if((p1-p2) > 0)
	{
		t = p1-p2;
	}
	else
	{
		t = p1+p2;
	}
	if(t > 0 && t < rh.distance)
	{
		rh.distance = t;
		rh.pos = r.origin + t*r.dir;
		rh.normal = normalize(rh.pos - s.center);
		rh.color = s.color;
	}
}

void intersectPlane(ray r, inout rayHit rh)
{
	float t = -r.origin.y / r.dir.y;
	if(t > 0 && t < rh.distance)
	{
		rh.distance = t;
		rh.pos = r.origin + t*r.dir;
		rh.normal = float3(0,1,0);
		rh.color = float3(0.8f,0.8f,0.8f);
	}
}

//trace

rayHit Trace(ray r)
{
	rayHit rh = createRayHit();

	//testar intersections
	uint numSpheres, stride;
	spheres.GetDimensions(numSpheres, stride);
	for(uint i = 0; i < numSpheres; i++)
	{
		intersectSphere(r, i, rh);
	}
	intersectPlane(r, rh);
	return rh;
}

//shadow

float3 Shadow(ray r, rayHit rh)
{
	if(rh.distance < 100000000)
	{
		//calcular reflexão ou refração do raio
		r.origin = rh.pos + rh.normal*0.001f;
		r.dir = reflect(r.dir, rh.normal);
		r.energy = float3(	r.energy.x*rh.color.x, 
							r.energy.y*rh.color.y,
							r.energy.z*rh.color.z);

		//verificar se ponto está em sombra
		bool shade = false;
		ray shadowRay = createRay(r.origin, -light.xyz);
		rayHit shadowHit = Trace(shadowRay);
		if(shadowHit.distance != 100000000)
		{
			return float3(0,0,0);
		}
		else
		{
			return (saturate(dot(rh.normal, -light.xyz)) * light.w * rh.color);
		}
	}
	else
	{
		//ray desaparece
		r.energy = float3(0,0,0);
		float theta = acos(r.dir.y) / -PI;
		float phi = atan2(r.dir.x, -r.dir.z) / -PI *0.5f;
		return skybox.SampleLevel(sampler_skybox, float2(phi,theta), 0).xyz;
	}
}

//main

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint w, h;
	Result.GetDimensions(w,h);
   //generate ray
   float2 uv = id.xy/float2(w,h)*2.0f - 1.0f;
   ray r = createCameraRay(uv);

   //trace + shadows
   float3 color = float3(0,0,0);

   for(int i=0; i<8; i++)
   {
   		rayHit rh = Trace(r);
   		color += r.energy * Shadow(r, rh);
   }

   //return
   Result[id.xy] = float4(color, 1);
}
